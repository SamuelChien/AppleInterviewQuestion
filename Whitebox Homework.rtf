{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\margb1800\margt1800\vieww19720\viewh15320\viewkind0
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
PROBLEM 1\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
You may be familiar with the following C function from stdlib.h:\
\
	int atoi(const char * str);\
\
This function parses a C string, interprets its content as an integral number, then returns this number as an int value. Provide another implementation of this function (using a different name) along with a small main() function that demonstrates its use.  Your solution should be a single C source file that may be compiled using a standard C compiler.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
PROBLEM 2
\b0 \expnd0\expndtw0\kerning0
\
In C programming, you've probably used the following two functions from stdlib.h to respectively allocate and deallocate memory from the heap:\
\
	void * malloc(size_t size);\
	void free(void *ptr);\
\
The C language specification does not specify certain properties of memory allocated by malloc.  One of these unspecified properties is whether the allocated memory is aligned.  An n-byte aligned address is defined as an address that is a multiple of n bytes, where n is restricted to be a power of 2.  An n-byte aligned address is also sometimes referred to as an address that falls on a n-byte boundary.\
\
Your job is to implement a pair of functions that allocate and deallocate memory like malloc and free, but return addresses that aligned to an n-byte boundary, where n is again guaranteed to be a power of 2.  Use the following two prototypes as a reference:\
\
   void * aligned_malloc(size_t size, size_t alignment);\
   void aligned_free(void * ptr);\
\
You may use malloc and free to implement your solution.  Implement these, along with a small main() function that demonstrates their use.  Your solution should be a single C source file that may be compiled using a standard C compiler.\
\

\b \expnd0\expndtw0\kerning0
PROBLEM 3\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\b0 \cf0 \expnd0\expndtw0\kerning0
There are 1000 files located in a Unix directory tree under /repository.  You are asked to provide a list of every filename that contains an IP address.  How would you solve this problem?  Provide a working example.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\b \cf0 \expnd0\expndtw0\kerning0
PROBLEM 4
\b0 \expnd0\expndtw0\kerning0
\
Apple provides guides to the Objective-C language at:\
http://developer.apple.com/documentation/Cocoa/ObjectiveCLanguage-date.html\
\
Using the information in these documents, create an Objective-C class, with accompanying header file. The class will represent a 
\i \expnd0\expndtw0\kerning0
book
\i0 \expnd0\expndtw0\kerning0
, and should have a 
\i \expnd0\expndtw0\kerning0
title
\i0 \expnd0\expndtw0\kerning0
, 
\i \expnd0\expndtw0\kerning0
author
\i0 \expnd0\expndtw0\kerning0
, and a 
\i \expnd0\expndtw0\kerning0
year of publication
\i0 \expnd0\expndtw0\kerning0
.\'a0Be sure to provide a designated initializer and accessors for these properties.\
\
You may optionally provide a small main() function that demonstrates its use.\
}